package com.example.demo.service;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.stereotype.Service;

import java.util.Optional;
import java.util.Random;
import java.util.regex.Pattern;

@Service
public class UserService {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private JavaMailSender emailSender;

    // Regular Expression for password validation
    private static final String PASSWORD_PATTERN = "^(?=.*[a-zA-Z])(?=.*[0-9])(?=.*[@#$%^&+=]).{8,}$";

    public String register(User user, String confirmPassword) {
        // Validate password
        if (!Pattern.matches(PASSWORD_PATTERN, user.getPassword())) {
            return "Password must be alphanumeric and include at least one special character.";
        }

        // Validate confirmPassword
        if (!user.getPassword().equals(confirmPassword)) {
            return "Passwords do not match.";
        }

        // Check if email is already registered
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            return "Email is already registered.";
        }

        userRepository.save(user);
        return "User registered successfully!";
    }

    public Optional<User> login(String email, String password) {
        return userRepository.findByUsername(email)
                .filter(user -> user.getPassword().equals(password));
    }

    // Method to generate a 6-digit OTP
    private String generateOtp() {
        Random rand = new Random();
        int otp = rand.nextInt(900000) + 100000;  // Generates a 6-digit OTP
        return String.valueOf(otp);
    }

    // Method to send OTP to the user's email
    private void sendOtpEmail(String email, String otp) {
        SimpleMailMessage message = new SimpleMailMessage();
        message.setTo(email);
        message.setSubject("Forgot Password OTP");
        message.setText("Your OTP for password reset is: " + otp + ". It will expire in 5 minutes.");
        emailSender.send(message);
    }

    // Forgot Password functionality
    public String forgotPassword(String username) {
        Optional<User> userOptional = userRepository.findByUsername(username);
        if (userOptional.isEmpty()) {
            return "User with this email does not exist.";
        }

        // Generate OTP (6 digits)
        String otp = generateOtp();
        long expiryTime = System.currentTimeMillis() + 300000; // 5 minutes expiry time

        User user = userOptional.get();

        // Store OTP and expiry time temporarily in the user entity
        user.setOtp(otp);
        user.setOtpExpiryTime(expiryTime);
        userRepository.save(user);

        // Send OTP to user's email
        sendOtpEmail(user.getUsername(), otp);

        return "OTP sent to email. Please check your inbox.";
    }

    // Verify OTP functionality
    public String verifyOtp(String username, String otp) {
        Optional<User> userOptional = userRepository.findByUsername(username);
        if (userOptional.isEmpty()) {
            return "User not found.";
        }

        User user = userOptional.get();

        // Check if OTP matches and if it is not expired
        if (user.getOtp() == null || !user.getOtp().equals(otp)) {
            return "Invalid OTP.";
        }

        if (System.currentTimeMillis() > user.getOtpExpiryTime()) {
            return "OTP has expired.";
        }

        // OTP is valid
        return "OTP verified. Please enter your new password.";
    }

    // Reset Password functionality
    public String resetPassword(String username, String newPassword) {
        Optional<User> userOptional = userRepository.findByUsername(username);
        if (userOptional.isEmpty()) {
            return "User not found.";
        }

        User user = userOptional.get();

        // Set the new password
        user.setPassword(newPassword); // You may want to hash the password here before saving
        user.setOtp(null); // Clear OTP once the password is reset
        user.setOtpExpiryTime(0); // Clear OTP expiry time

        userRepository.save(user);
        return "Password successfully updated!";
    }
}
