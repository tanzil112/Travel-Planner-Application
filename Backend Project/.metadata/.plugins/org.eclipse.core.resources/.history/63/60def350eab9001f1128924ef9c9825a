package com.example.demo.controller;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;
import java.util.UUID;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "http://localhost:5173")
public class AuthController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // Registration Endpoint
    @PostMapping("/register")
    public String registerUser(@RequestBody User user) {
        if (userRepository.findByUsername(user.getUsername()).isPresent()) {
            return "Error: Username already exists!";
        }
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        userRepository.save(user);
        return "User registered successfully!";
    }

    // Login Endpoint
    @PostMapping("/login")
    public String loginUser(@RequestBody User user) {
        if (user.getUsername() == null || user.getUsername().isEmpty() ||
            user.getPassword() == null || user.getPassword().isEmpty()) {
            return "Username and password cannot be empty";
        }

        Optional<User> existingUserOptional = userRepository.findByUsername(user.getUsername());
        if (existingUserOptional.isEmpty()) {
            return "Invalid username or password"; // Username not found
        }

        User existingUser = existingUserOptional.get();
        if (passwordEncoder.matches(user.getPassword(), existingUser.getPassword())) {
            return "Login successful!";
        } else {
            return "Invalid username or password"; // Password mismatch
        }
    }

    // Forgot Password: Send Reset Link
    @PostMapping("/forgot-password")
    public String forgotPassword(@RequestParam String email) {
        Optional<User> userOptional = userRepository.findByUsername(email);

        if (userOptional.isEmpty()) {
            return "Error: Email not found.";
        }

        // Generate a reset token (UUID) and set it on the user
        User user = userOptional.get();
        String resetToken = UUID.randomUUID().toString();
        user.setPasswordResetToken(resetToken);
        userRepository.save(user);

        // Ideally, send the reset token via email
        // For this implementation, we return it as a response
        return "Password reset link has been sent to your email. Token: " + resetToken;
    }

    // Reset Password
    @PostMapping("/reset-password")
    public String resetPassword(@RequestParam String token, @RequestParam String newPassword) {
        Optional<User> userOptional = userRepository.findByPasswordResetToken(token);

        if (userOptional.isEmpty()) {
            return "Error: Invalid or expired reset token.";
        }

        User user = userOptional.get();

        // Validate the new password
        if (newPassword == null || newPassword.isEmpty()) {
            return "Error: New password cannot be empty.";
        }

        // Update the password and clear the reset token
        user.setPassword(passwordEncoder.encode(newPassword));
        user.setPasswordResetToken(null); // Clear the token after successful reset
        userRepository.save(user);

        return "Password reset successfully!";
    }
}
